///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CONTACT'
// Generated by LLBLGen v1.21.2003.712 Final on: 16/03/2008, 11:17:33 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace NhansuLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CONTACT'.
	/// </summary>
	public class CONTACT : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_jOINED_DATE;
			private SqlDecimal		_eMPLOYEE_TYPE_ID, _eMPLOYEE_TYPE_IDOld, _eMPLOYEE_ID, _eMPLOYEE_IDOld, _sAL, _pOST_ID, _pOST_IDOld, _iD;
			private SqlString		_pERIODOF_CONTACT, _cONTACT_CODE, _dEPARTMENT;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CONTACT()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CONTACT_CODE</LI>
		///		 <LI>JOINED_DATE. May be SqlDateTime.Null</LI>
		///		 <LI>PERIODOF_CONTACT. May be SqlString.Null</LI>
		///		 <LI>POST_ID. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_TYPE_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DEPARTMENT. May be SqlString.Null</LI>
		///		 <LI>SAL. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@CONTACT_CODE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cONTACT_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@JOINED_DATE", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 23, 3, "", DataRowVersion.Proposed, _jOINED_DATE));
				cmdToExecute.Parameters.Add(new SqlParameter("@PERIODOF_CONTACT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _pERIODOF_CONTACT));
				cmdToExecute.Parameters.Add(new SqlParameter("@POST_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pOST_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_TYPE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_TYPE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DEPARTMENT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dEPARTMENT));
				cmdToExecute.Parameters.Add(new SqlParameter("@SAL", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _sAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>CONTACT_CODE</LI>
		///		 <LI>JOINED_DATE. May be SqlDateTime.Null</LI>
		///		 <LI>PERIODOF_CONTACT. May be SqlString.Null</LI>
		///		 <LI>POST_ID. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_TYPE_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DEPARTMENT. May be SqlString.Null</LI>
		///		 <LI>SAL. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@CONTACT_CODE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cONTACT_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@JOINED_DATE", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 23, 3, "", DataRowVersion.Proposed, _jOINED_DATE));
				cmdToExecute.Parameters.Add(new SqlParameter("@PERIODOF_CONTACT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _pERIODOF_CONTACT));
				cmdToExecute.Parameters.Add(new SqlParameter("@POST_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pOST_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_TYPE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_TYPE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DEPARTMENT", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dEPARTMENT));
				cmdToExecute.Parameters.Add(new SqlParameter("@SAL", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _sAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'POST_ID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'POST_ID' in
		/// all rows which have as value for this field the value as set in property 'POST_IDOld' to 
		/// the value as set in property 'POST_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>POST_ID. May be SqlDecimal.Null</LI>
		///		 <LI>POST_IDOld. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWPOST_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_UpdateAllWPOST_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@POST_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pOST_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@POST_IDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pOST_IDOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::UpdateAllWPOST_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'EMPLOYEE_TYPE_ID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'EMPLOYEE_TYPE_ID' in
		/// all rows which have as value for this field the value as set in property 'EMPLOYEE_TYPE_IDOld' to 
		/// the value as set in property 'EMPLOYEE_TYPE_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_TYPE_ID. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_TYPE_IDOld. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWEMPLOYEE_TYPE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_UpdateAllWEMPLOYEE_TYPE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_TYPE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_TYPE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_TYPE_IDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_TYPE_IDOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::UpdateAllWEMPLOYEE_TYPE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'EMPLOYEE_ID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'EMPLOYEE_ID' in
		/// all rows which have as value for this field the value as set in property 'EMPLOYEE_IDOld' to 
		/// the value as set in property 'EMPLOYEE_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_ID. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_IDOld. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWEMPLOYEE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_UpdateAllWEMPLOYEE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_IDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_IDOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::UpdateAllWEMPLOYEE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'POST_ID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>POST_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWPOST_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_DeleteAllWPOST_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@POST_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pOST_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::DeleteAllWPOST_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'EMPLOYEE_TYPE_ID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_TYPE_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWEMPLOYEE_TYPE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_DeleteAllWEMPLOYEE_TYPE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_TYPE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_TYPE_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::DeleteAllWEMPLOYEE_TYPE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'EMPLOYEE_ID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWEMPLOYEE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CONTACT_DeleteAllWEMPLOYEE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CONTACT::DeleteAllWEMPLOYEE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString CONTACT_CODE
		{
			get
			{
				return _cONTACT_CODE;
			}
			set
			{
				SqlString cONTACT_CODETmp = (SqlString)value;
				if(cONTACT_CODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CONTACT_CODE", "CONTACT_CODE can't be NULL");
				}
				_cONTACT_CODE = value;
			}
		}


		public SqlDateTime JOINED_DATE
		{
			get
			{
				return _jOINED_DATE;
			}
			set
			{
				SqlDateTime jOINED_DATETmp = (SqlDateTime)value;
				if(jOINED_DATETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("JOINED_DATE", "JOINED_DATE can't be NULL");
				}
				_jOINED_DATE = value;
			}
		}


		public SqlString PERIODOF_CONTACT
		{
			get
			{
				return _pERIODOF_CONTACT;
			}
			set
			{
				SqlString pERIODOF_CONTACTTmp = (SqlString)value;
				if(pERIODOF_CONTACTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PERIODOF_CONTACT", "PERIODOF_CONTACT can't be NULL");
				}
				_pERIODOF_CONTACT = value;
			}
		}


		public SqlDecimal POST_ID
		{
			get
			{
				return _pOST_ID;
			}
			set
			{
				SqlDecimal pOST_IDTmp = (SqlDecimal)value;
				if(pOST_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("POST_ID", "POST_ID can't be NULL");
				}
				_pOST_ID = value;
			}
		}
		public SqlDecimal POST_IDOld
		{
			get
			{
				return _pOST_IDOld;
			}
			set
			{
				SqlDecimal pOST_IDOldTmp = (SqlDecimal)value;
				if(pOST_IDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("POST_IDOld", "POST_IDOld can't be NULL");
				}
				_pOST_IDOld = value;
			}
		}


		public SqlDecimal EMPLOYEE_TYPE_ID
		{
			get
			{
				return _eMPLOYEE_TYPE_ID;
			}
			set
			{
				SqlDecimal eMPLOYEE_TYPE_IDTmp = (SqlDecimal)value;
				if(eMPLOYEE_TYPE_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_TYPE_ID", "EMPLOYEE_TYPE_ID can't be NULL");
				}
				_eMPLOYEE_TYPE_ID = value;
			}
		}
		public SqlDecimal EMPLOYEE_TYPE_IDOld
		{
			get
			{
				return _eMPLOYEE_TYPE_IDOld;
			}
			set
			{
				SqlDecimal eMPLOYEE_TYPE_IDOldTmp = (SqlDecimal)value;
				if(eMPLOYEE_TYPE_IDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_TYPE_IDOld", "EMPLOYEE_TYPE_IDOld can't be NULL");
				}
				_eMPLOYEE_TYPE_IDOld = value;
			}
		}


		public SqlString DEPARTMENT
		{
			get
			{
				return _dEPARTMENT;
			}
			set
			{
				SqlString dEPARTMENTTmp = (SqlString)value;
				if(dEPARTMENTTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DEPARTMENT", "DEPARTMENT can't be NULL");
				}
				_dEPARTMENT = value;
			}
		}


		public SqlDecimal SAL
		{
			get
			{
				return _sAL;
			}
			set
			{
				SqlDecimal sALTmp = (SqlDecimal)value;
				if(sALTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SAL", "SAL can't be NULL");
				}
				_sAL = value;
			}
		}


		public SqlDecimal EMPLOYEE_ID
		{
			get
			{
				return _eMPLOYEE_ID;
			}
			set
			{
				SqlDecimal eMPLOYEE_IDTmp = (SqlDecimal)value;
				if(eMPLOYEE_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_ID", "EMPLOYEE_ID can't be NULL");
				}
				_eMPLOYEE_ID = value;
			}
		}
		public SqlDecimal EMPLOYEE_IDOld
		{
			get
			{
				return _eMPLOYEE_IDOld;
			}
			set
			{
				SqlDecimal eMPLOYEE_IDOldTmp = (SqlDecimal)value;
				if(eMPLOYEE_IDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_IDOld", "EMPLOYEE_IDOld can't be NULL");
				}
				_eMPLOYEE_IDOld = value;
			}
		}
		#endregion
	}
}
