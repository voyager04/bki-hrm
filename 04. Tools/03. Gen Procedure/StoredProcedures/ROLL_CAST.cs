///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'ROLL_CAST'
// Generated by LLBLGen v1.21.2003.712 Final on: 16/03/2008, 11:17:33 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace NhansuLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'ROLL_CAST'.
	/// </summary>
	public class ROLL_CAST : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_tOTAL, _eMPLOYEE_ID, _eMPLOYEE_IDOld, _aDD_DAY, _iD, _bREAK_DAY;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ROLL_CAST()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>BREAK_DAY. May be SqlDecimal.Null</LI>
		///		 <LI>ADD_DAY. May be SqlDecimal.Null</LI>
		///		 <LI>TOTAL. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ROLL_CAST_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@BREAK_DAY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _bREAK_DAY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ADD_DAY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _aDD_DAY));
				cmdToExecute.Parameters.Add(new SqlParameter("@TOTAL", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _tOTAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ROLL_CAST::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>BREAK_DAY. May be SqlDecimal.Null</LI>
		///		 <LI>ADD_DAY. May be SqlDecimal.Null</LI>
		///		 <LI>TOTAL. May be SqlDecimal.Null</LI>
		///		 <LI>EMPLOYEE_ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ROLL_CAST_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@BREAK_DAY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _bREAK_DAY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ADD_DAY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _aDD_DAY));
				cmdToExecute.Parameters.Add(new SqlParameter("@TOTAL", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _tOTAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ROLL_CAST::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'EMPLOYEE_ID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'EMPLOYEE_ID' in
		/// all rows which have as value for this field the value as set in property 'EMPLOYEE_IDOld' to 
		/// the value as set in property 'EMPLOYEE_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_ID</LI>
		///		 <LI>EMPLOYEE_IDOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWEMPLOYEE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ROLL_CAST_UpdateAllWEMPLOYEE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_IDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_IDOld));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ROLL_CAST::UpdateAllWEMPLOYEE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ROLL_CAST_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ROLL_CAST::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'EMPLOYEE_ID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EMPLOYEE_ID</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWEMPLOYEE_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_ROLL_CAST_DeleteAllWEMPLOYEE_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@EMPLOYEE_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _eMPLOYEE_ID));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("ROLL_CAST::DeleteAllWEMPLOYEE_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal BREAK_DAY
		{
			get
			{
				return _bREAK_DAY;
			}
			set
			{
				SqlDecimal bREAK_DAYTmp = (SqlDecimal)value;
				if(bREAK_DAYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BREAK_DAY", "BREAK_DAY can't be NULL");
				}
				_bREAK_DAY = value;
			}
		}


		public SqlDecimal ADD_DAY
		{
			get
			{
				return _aDD_DAY;
			}
			set
			{
				SqlDecimal aDD_DAYTmp = (SqlDecimal)value;
				if(aDD_DAYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ADD_DAY", "ADD_DAY can't be NULL");
				}
				_aDD_DAY = value;
			}
		}


		public SqlDecimal TOTAL
		{
			get
			{
				return _tOTAL;
			}
			set
			{
				SqlDecimal tOTALTmp = (SqlDecimal)value;
				if(tOTALTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TOTAL", "TOTAL can't be NULL");
				}
				_tOTAL = value;
			}
		}


		public SqlDecimal EMPLOYEE_ID
		{
			get
			{
				return _eMPLOYEE_ID;
			}
			set
			{
				SqlDecimal eMPLOYEE_IDTmp = (SqlDecimal)value;
				if(eMPLOYEE_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_ID", "EMPLOYEE_ID can't be NULL");
				}
				_eMPLOYEE_ID = value;
			}
		}
		public SqlDecimal EMPLOYEE_IDOld
		{
			get
			{
				return _eMPLOYEE_IDOld;
			}
			set
			{
				SqlDecimal eMPLOYEE_IDOldTmp = (SqlDecimal)value;
				if(eMPLOYEE_IDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMPLOYEE_IDOld", "EMPLOYEE_IDOld can't be NULL");
				}
				_eMPLOYEE_IDOld = value;
			}
		}
		#endregion
	}
}
