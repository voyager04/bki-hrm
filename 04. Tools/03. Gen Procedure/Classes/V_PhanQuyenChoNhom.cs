///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'v_PhanQuyenChoNhom'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, January 05, 2004, 11:51:22 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace eschoolLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'v_PhanQuyenChoNhom'.
	/// </summary>
	public class V_PhanQuyenChoNhom : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_iD, _pHAN_QUYEN_ID, _nHOM_NGUOI_SU_DUNG_ID;
			private SqlString		_mA_PHAN_HE, _tEN_PHAN_QUYEN, _mA_PHAN_QUYEN;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_PhanQuyenChoNhom()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NHOM_NGUOI_SU_DUNG_ID</LI>
		///		 <LI>PHAN_QUYEN_ID</LI>
		///		 <LI>TEN_PHAN_QUYEN</LI>
		///		 <LI>MA_PHAN_QUYEN</LI>
		///		 <LI>MA_PHAN_HE</LI>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_v_PhanQuyenChoNhom_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@NHOM_NGUOI_SU_DUNG_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _nHOM_NGUOI_SU_DUNG_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@PHAN_QUYEN_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _pHAN_QUYEN_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_PHAN_QUYEN", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_PHAN_QUYEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_PHAN_QUYEN", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_PHAN_QUYEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_PHAN_HE", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_PHAN_HE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_PhanQuyenChoNhom::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the view.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_v_PhanQuyenChoNhom_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("v_PhanQuyenChoNhom");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_PhanQuyenChoNhom::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal NHOM_NGUOI_SU_DUNG_ID
		{
			get
			{
				return _nHOM_NGUOI_SU_DUNG_ID;
			}
			set
			{
				SqlDecimal nHOM_NGUOI_SU_DUNG_IDTmp = (SqlDecimal)value;
				if(nHOM_NGUOI_SU_DUNG_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NHOM_NGUOI_SU_DUNG_ID", "NHOM_NGUOI_SU_DUNG_ID can't be NULL");
				}
				_nHOM_NGUOI_SU_DUNG_ID = value;
			}
		}


		public SqlDecimal PHAN_QUYEN_ID
		{
			get
			{
				return _pHAN_QUYEN_ID;
			}
			set
			{
				SqlDecimal pHAN_QUYEN_IDTmp = (SqlDecimal)value;
				if(pHAN_QUYEN_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PHAN_QUYEN_ID", "PHAN_QUYEN_ID can't be NULL");
				}
				_pHAN_QUYEN_ID = value;
			}
		}


		public SqlString TEN_PHAN_QUYEN
		{
			get
			{
				return _tEN_PHAN_QUYEN;
			}
			set
			{
				SqlString tEN_PHAN_QUYENTmp = (SqlString)value;
				if(tEN_PHAN_QUYENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_PHAN_QUYEN", "TEN_PHAN_QUYEN can't be NULL");
				}
				_tEN_PHAN_QUYEN = value;
			}
		}


		public SqlString MA_PHAN_QUYEN
		{
			get
			{
				return _mA_PHAN_QUYEN;
			}
			set
			{
				SqlString mA_PHAN_QUYENTmp = (SqlString)value;
				if(mA_PHAN_QUYENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_PHAN_QUYEN", "MA_PHAN_QUYEN can't be NULL");
				}
				_mA_PHAN_QUYEN = value;
			}
		}


		public SqlString MA_PHAN_HE
		{
			get
			{
				return _mA_PHAN_HE;
			}
			set
			{
				SqlString mA_PHAN_HETmp = (SqlString)value;
				if(mA_PHAN_HETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_PHAN_HE", "MA_PHAN_HE can't be NULL");
				}
				_mA_PHAN_HE = value;
			}
		}


		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}
		#endregion
	}
}
