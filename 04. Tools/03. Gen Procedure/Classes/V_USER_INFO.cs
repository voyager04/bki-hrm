///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_USER_INFO'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, January 05, 2004, 11:51:24 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace eschoolLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_USER_INFO'.
	/// </summary>
	public class V_USER_INFO : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_iD_NGUOI_SU_DUNG, _iD_DON_VI;
			private SqlString		_tEN_NGUOI_SU_DUNG, _mAT_KHAU, _tEN_TRUY_CAP, _tEN_DON_VI, _mA_DON_VI;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_USER_INFO()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI</LI>
		///		 <LI>MA_DON_VI</LI>
		///		 <LI>TEN_DON_VI</LI>
		///		 <LI>ID_NGUOI_SU_DUNG</LI>
		///		 <LI>TEN_TRUY_CAP</LI>
		///		 <LI>TEN_NGUOI_SU_DUNG</LI>
		///		 <LI>MAT_KHAU</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_USER_INFO_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_DON_VI", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_DON_VI", SqlDbType.NVarChar, 256, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_SU_DUNG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_SU_DUNG));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_TRUY_CAP", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_TRUY_CAP));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_NGUOI_SU_DUNG", SqlDbType.NVarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_NGUOI_SU_DUNG));
				cmdToExecute.Parameters.Add(new SqlParameter("@MAT_KHAU", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mAT_KHAU));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_USER_INFO::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the view.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_USER_INFO_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("V_USER_INFO");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_USER_INFO::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID_DON_VI
		{
			get
			{
				return _iD_DON_VI;
			}
			set
			{
				SqlDecimal iD_DON_VITmp = (SqlDecimal)value;
				if(iD_DON_VITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI", "ID_DON_VI can't be NULL");
				}
				_iD_DON_VI = value;
			}
		}


		public SqlString MA_DON_VI
		{
			get
			{
				return _mA_DON_VI;
			}
			set
			{
				SqlString mA_DON_VITmp = (SqlString)value;
				if(mA_DON_VITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_DON_VI", "MA_DON_VI can't be NULL");
				}
				_mA_DON_VI = value;
			}
		}


		public SqlString TEN_DON_VI
		{
			get
			{
				return _tEN_DON_VI;
			}
			set
			{
				SqlString tEN_DON_VITmp = (SqlString)value;
				if(tEN_DON_VITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_DON_VI", "TEN_DON_VI can't be NULL");
				}
				_tEN_DON_VI = value;
			}
		}


		public SqlDecimal ID_NGUOI_SU_DUNG
		{
			get
			{
				return _iD_NGUOI_SU_DUNG;
			}
			set
			{
				SqlDecimal iD_NGUOI_SU_DUNGTmp = (SqlDecimal)value;
				if(iD_NGUOI_SU_DUNGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_SU_DUNG", "ID_NGUOI_SU_DUNG can't be NULL");
				}
				_iD_NGUOI_SU_DUNG = value;
			}
		}


		public SqlString TEN_TRUY_CAP
		{
			get
			{
				return _tEN_TRUY_CAP;
			}
			set
			{
				SqlString tEN_TRUY_CAPTmp = (SqlString)value;
				if(tEN_TRUY_CAPTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_TRUY_CAP", "TEN_TRUY_CAP can't be NULL");
				}
				_tEN_TRUY_CAP = value;
			}
		}


		public SqlString TEN_NGUOI_SU_DUNG
		{
			get
			{
				return _tEN_NGUOI_SU_DUNG;
			}
			set
			{
				SqlString tEN_NGUOI_SU_DUNGTmp = (SqlString)value;
				if(tEN_NGUOI_SU_DUNGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_NGUOI_SU_DUNG", "TEN_NGUOI_SU_DUNG can't be NULL");
				}
				_tEN_NGUOI_SU_DUNG = value;
			}
		}


		public SqlString MAT_KHAU
		{
			get
			{
				return _mAT_KHAU;
			}
			set
			{
				SqlString mAT_KHAUTmp = (SqlString)value;
				if(mAT_KHAUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MAT_KHAU", "MAT_KHAU can't be NULL");
				}
				_mAT_KHAU = value;
			}
		}
		#endregion
	}
}
