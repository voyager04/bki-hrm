///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'v_phan_quyen_cho_nhom'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, January 05, 2004, 11:51:21 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace eschoolLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'v_phan_quyen_cho_nhom'.
	/// </summary>
	public class V_phan_quyen_cho_nhom : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		_ma_nhom, _ma_phan_quyen;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_phan_quyen_cho_nhom()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Ma_phan_quyen</LI>
		///		 <LI>Ma_nhom</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_v_phan_quyen_cho_nhom_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ma_phan_quyen", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _ma_phan_quyen));
				cmdToExecute.Parameters.Add(new SqlParameter("@ma_nhom", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _ma_nhom));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_phan_quyen_cho_nhom::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the view.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_v_phan_quyen_cho_nhom_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("v_phan_quyen_cho_nhom");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_phan_quyen_cho_nhom::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString Ma_phan_quyen
		{
			get
			{
				return _ma_phan_quyen;
			}
			set
			{
				SqlString ma_phan_quyenTmp = (SqlString)value;
				if(ma_phan_quyenTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Ma_phan_quyen", "Ma_phan_quyen can't be NULL");
				}
				_ma_phan_quyen = value;
			}
		}


		public SqlString Ma_nhom
		{
			get
			{
				return _ma_nhom;
			}
			set
			{
				SqlString ma_nhomTmp = (SqlString)value;
				if(ma_nhomTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Ma_nhom", "Ma_nhom can't be NULL");
				}
				_ma_nhom = value;
			}
		}
		#endregion
	}
}
